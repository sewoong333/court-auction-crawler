// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Auction {
  id              String         @id @default(cuid())
  caseNumber      String         @unique // 사건번호
  court           String         // 법원
  location        String         // 소재지
  type            String         // 물건종류
  minimumBid      Float         // 최저입찰가
  estimatedPrice  Float         // 감정가
  auctionDate     DateTime      // 입찰일
  status          String        // 진행상태
  views           Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  images          Image[]
  details         Detail[]
  watchlist       WatchlistItem[]
}

model Image {
  id        String   @id @default(cuid())
  url       String
  auctionId String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Detail {
  id        String   @id @default(cuid())
  key       String
  value     String
  auctionId String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model User {
  id            String         @id @default(cuid())
  email         String        @unique
  name          String?
  password      String        // 해시된 비밀번호
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  watchlist     WatchlistItem[]
  refreshTokens RefreshToken[]
}

model WatchlistItem {
  id        String   @id @default(cuid())
  userId    String
  auctionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, auctionId])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}
